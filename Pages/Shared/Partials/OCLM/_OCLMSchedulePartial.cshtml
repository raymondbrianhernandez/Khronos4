@using Khronos4.Models
@model Khronos4.Models.OCLMScheduleViewModel

@{
    List<OCLMPart> existingParts = Model.ExistingParts;

    int startTimeMinutes = (int)Model.StartTime.TotalMinutes;
    int index = 0;
    string today = DateTime.Now.ToString("yyyy-MM-dd");

    bool hasExistingData = Model.IsFromDatabase
        && existingParts != null
        && existingParts.Any()
        && Model.ExistingWeekText == Model.SelectedMeetingWeekText;

    string Get(string key) => Model.ScrapedData.TryGetValue(key, out var val) ? val : "";

    string GetOrDb(string key)
    {
        if (hasExistingData)
        {
            var match = existingParts.FirstOrDefault(p =>
                !string.IsNullOrWhiteSpace(p.Part) &&
                (p.Part.Contains(key, StringComparison.OrdinalIgnoreCase)
                 || key.Contains(p.Part, StringComparison.OrdinalIgnoreCase)));

            return match?.Part ?? "";
        }

        return Get(key);
    }

    string GetValue(string partName, string field)
    {
        if (!hasExistingData) return "";

        var match = existingParts.FirstOrDefault(p => p.Part != null && p.Part.Contains(partName));
        if (match == null) return "";

        return field switch
        {
            "Assignee" => match.Assignee ?? "",
            "Assistant" => match.Assistant ?? "",
            "Time" => match.StartTime.ToString(@"hh\:mm"),
            _ => ""
        };
    }

    string Selected(string value, string compare) =>
        hasExistingData && value == compare ? "selected" : null;

    int ExtractMinutes(string timeText)
    {
        var match = System.Text.RegularExpressions.Regex.Match(timeText ?? "", @"\d+");
        return match.Success ? int.Parse(match.Value) : 0;
    }

    string ExtractMinutesFromPart(string part)
    {
        var match = System.Text.RegularExpressions.Regex.Match(part ?? "", @"\((\d+)\s*min");
        return match.Success ? $"{match.Groups[1].Value} min." : "";
    }

    string Sanitize(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return input;

        return input
            .Replace('“', '"')
            .Replace('”', '"')
            .Replace('‘', '\'')
            .Replace('’', '\'')
            .Replace('–', '-')
            .Replace('—', '-')
            .Replace("…", "...");
    }

    string DisplayTime(int minutes) =>
        $"{(minutes / 60 > 12 ? minutes / 60 - 12 : minutes / 60)}:{minutes % 60:D2} {(minutes / 60 >= 12 ? "PM" : "AM")}";

    string SubmitTime(int minutes) =>
        $"{minutes / 60:D2}:{minutes % 60:D2}";

    // SONG HANDLING 
    var allSongs = hasExistingData
    ? existingParts
        .Where(p => p.Part?.TrimStart().StartsWith("Song", StringComparison.OrdinalIgnoreCase) ?? false)
        .OrderBy(p => p.StartTime)
        .ToList()
    : new List<OCLMPart>(); // empty list when scraping

    var openingSong = hasExistingData
        ? allSongs.ElementAtOrDefault(0)?.Part ?? ""
        : Get("Opening Song");

    var middleSong = hasExistingData
        ? allSongs.ElementAtOrDefault(1)?.Part ?? ""
        : Get("Middle Song");

    var closingSong = hasExistingData
        ? allSongs.ElementAtOrDefault(2)?.Part ?? ""
        : Get("Closing Song");

    // Chairman Assignee: First part with time = 00:00:00 and not a Song
    var chairmanAssignee = hasExistingData
        ? existingParts.FirstOrDefault(p => p.StartTime == TimeSpan.Zero && !p.Part.StartsWith("Song", StringComparison.OrdinalIgnoreCase))?.Assignee ?? ""
        : GetValue("Weekly Bible Verses", "Assignee");

    // Opening Prayer
    var openingPrayerAssignee = hasExistingData
        ? existingParts.FirstOrDefault(p => p.Part == openingSong)?.Assignee ?? ""
        : GetValue("Opening Prayer", "Assignee");

    // Closing Prayer
    var closingPrayerAssignee = hasExistingData
        ? existingParts.FirstOrDefault(p => p.Part == "Closing Prayer")?.Assignee ?? ""
        : GetValue("Closing Prayer", "Assignee");
}

<!-- FORM START -->
<form method="post" action="/OCLMManager?handler=UpdateMeeting">
    <input type="hidden" name="CongregationName" value="@Model.CongregationName" />
    <input type="hidden" name="SelectedMeetingWeekText" value="@Model.SelectedMeetingWeekText" />

    <table class="OCLM-Editor">
        <tr>
            <td colspan="2"><h4>@Model.CongregationName</h4></td>
            <td colspan="3"><h4>Midweek Meeting Schedule</h4></td>
        </tr>

        <!-- Bible Verse + Chairman -->
        <tr>
            <td>
                <input type="date" name="Date"
                       value="@(Model.SavedDate.HasValue ? Model.SavedDate.Value.ToString("yyyy-MM-dd") : DateTime.Today.ToString("yyyy-MM-dd"))" />
            </td>
            @{
                var part = hasExistingData
                ? existingParts.FirstOrDefault(p => !string.IsNullOrWhiteSpace(p.Part) && !p.Part.Contains("Song") && p.StartTime == TimeSpan.Zero)?.Part ?? ""
                : Get("Weekly Bible Verses");

                var display = System.Text.RegularExpressions.Regex.Replace(part, @"\s*\(.*?\)", "").Trim();
                var id = hasExistingData
                ? existingParts.FirstOrDefault(p => p.Part == part)?.ID ?? 0
                : 0;
            }
            <td>
                | @Sanitize(display)
                <input type="hidden" name="BibleVerse" value="@Sanitize(part)" />

                <!-- ✅ Required for OnPostUpdateMeeting -->
                <input type="hidden" name="PartIDs[@index]" value="@id" />
                <input type="hidden" name="AllAssignees[@index]" value="@chairmanAssignee" data-index="@index" />
                <input type="hidden" name="AllAssistants[@index]" value="" />
                <input type="hidden" name="AllParts[@index]" value="@Sanitize(part)" />
                <input type="hidden" name="StartTimes[@index]" value="00:00" />
            </td>
            <td style="text-align:right;"><i><small>Chairman:</small></i></td>
            <td>
                <select name="Chairman" class="form-control" data-index="@index"Opening Prayer
                        onchange="document.querySelector(`input[name='AllAssignees[@index]']`).value = this.value;">
                    <option value="">Elders/Servants</option>
                    @foreach (var person in Model.EldersAndServantsDropdown)
                    {
                        <option value="@person.Value" selected="@Selected(person.Value, chairmanAssignee)">
                            @person.Text
                        </option>
                    }
                </select>
            </td>
        </tr>
        @{
            index++;
        }

        <!-- Opening Song & Prayer -->
        <tr>
            @{
                var partName1 = openingSong;
                var partId1 = hasExistingData ? existingParts.FirstOrDefault(p => p.Part == partName1)?.ID ?? 0 : 0;
            }

            <td>
                @DisplayTime(startTimeMinutes)
                <input type="hidden" name="StartTimes[@index]" value="@SubmitTime(startTimeMinutes)" />
                <input type="hidden" name="PartIDs[@index]" value="@partId1" />
                <input type="hidden" name="AllAssignees[@index]" value="@openingPrayerAssignee" data-index="@index" />
                <input type="hidden" name="AllAssistants[@index]" value="" />
                <input type="hidden" name="AllParts[@index]" value="@Sanitize(partName1)" />
            </td>

            <td>
                • @Sanitize(partName1)
                <input type="hidden" name="OpeningSong" value="@Sanitize(partName1)" />
            </td>

            <td style="text-align:right;"><i><small>Opening Prayer:</small></i></td>
            <td>
                <select name="OpeningPrayer" class="form-control" data-index="@index"
                        onchange="document.querySelector(`input[name='AllAssignees[@index]']`).value = this.value;">
                    <option value="">Elders/Servants</option>
                    @foreach (var p in Model.EldersAndServantsDropdown)
                    {
                        <option value="@p.Value" selected="@Selected(p.Value, openingPrayerAssignee)">@p.Text</option>
                    }
                </select>
            </td>
        </tr>
        @{
            startTimeMinutes += 5;
            index++;
        }

        <!-- Opening Comments -->
        <tr>
            @{
                var partName2 = "Opening Comments (1 min.)";
                var partId2 = hasExistingData
                ? existingParts.FirstOrDefault(p => p.Part.StartsWith("Opening Comments"))?.ID ?? 0
                : 0;
            }

            <td>
                @DisplayTime(startTimeMinutes)
                <input type="hidden" name="StartTimes[@index]" value="@SubmitTime(startTimeMinutes)" />
                <input type="hidden" name="PartIDs[@index]" value="@partId2" />
                <input type="hidden" name="AllAssignees[@index]" value="" />
                <input type="hidden" name="AllAssistants[@index]" value="" />
                <input type="hidden" name="AllParts[@index]" value="@Sanitize(partName2)" />
            </td>

            <td>
                • @Sanitize("Opening Comments") (1 min.)
            </td>

            <td></td>
            <td></td>
        </tr>
        @{
            startTimeMinutes += 1;
            index++;
        }

        <!-- TREASURES BANNER -->
        <tr><td colspan="5" style="background:gray;color:white;">TREASURES FROM GOD’S WORD</td></tr>
        
        <!-- TREASURES -->
        <tr>
            @{
                var rawPart = hasExistingData
                ? existingParts.FirstOrDefault(p => p.Part.StartsWith("1."))?.Part ?? ""
                : $"{Get("Treasures Talk Part")} (10 min.)";

                var partId = hasExistingData
                ? existingParts.FirstOrDefault(p => p.Part == rawPart)?.ID ?? 0
                : 0;

                var assignee = GetValue(rawPart, "Assignee");
                var partLabel = System.Text.RegularExpressions.Regex.Replace(rawPart, @"\s*\(.*?\)", "").Trim();
            }

            <td>
                @DisplayTime(startTimeMinutes)
                <input type="hidden" name="StartTimes[@index]" value="@SubmitTime(startTimeMinutes)" />
                <input type="hidden" name="PartIDs[@index]" value="@partId" />
                <input type="hidden" name="AllAssignees[@index]" value="@assignee" data-index="@index" />
                <input type="hidden" name="AllAssistants[@index]" value="" />
                <input type="hidden" name="AllParts[@index]" value="@Sanitize(rawPart)" />
            </td>

            <td>
                @Sanitize(partLabel) (10 min.)
            </td>

            <td></td>

            <td>
                <select name="TreasuresTalkSpeaker" class="form-control" data-index="@index"
                        onchange="document.querySelector(`input[name='AllAssignees[@index]']`).value = this.value;">
                    <option value="">Elders/Servants</option>
                    @foreach (var p in Model.EldersAndServantsDropdown)
                    {
                        <option value="@p.Value" selected="@Selected(p.Value, assignee)">@p.Text</option>
                    }
                </select>
            </td>
        </tr>
        @{
            startTimeMinutes += 10;
            index++;
        }

        <!-- SPIRITUAL GEMS -->
        <tr>
            @{
                var spiritualGemsFull = hasExistingData
                ? existingParts.FirstOrDefault(p => p.Part.StartsWith("2."))?.Part ?? ""
                : $"{Get("Spiritual Gems Part")} (10 min.)";

                var spiritualGemsId = hasExistingData
                ? existingParts.FirstOrDefault(p => p.Part == spiritualGemsFull)?.ID ?? 0
                : 0;

                var spiritualGemsAssignee = GetValue(spiritualGemsFull, "Assignee");
                var spiritualGemsLabel = System.Text.RegularExpressions.Regex.Replace(spiritualGemsFull, @"\s*\(.*?\)", "").Trim();
            }

            <td>
                @DisplayTime(startTimeMinutes)
                <input type="hidden" name="StartTimes[@index]" value="@SubmitTime(startTimeMinutes)" />
                <input type="hidden" name="PartIDs[@index]" value="@spiritualGemsId" />
                <input type="hidden" name="AllAssignees[@index]" value="@spiritualGemsAssignee" data-index="@index" />
                <input type="hidden" name="AllAssistants[@index]" value="" />
                <input type="hidden" name="AllParts[@index]" value="@Sanitize(spiritualGemsFull)" />
            </td>

            <td>
                @Sanitize(spiritualGemsLabel) (10 min.)
            </td>

            <td></td>

            <td>
                <select name="SpiritualGemsSpeaker" class="form-control" data-index="@index"
                        onchange="document.querySelector(`input[name='AllAssignees[@index]']`).value = this.value;">
                    <option value="">Elders/Servants</option>
                    @foreach (var p in Model.EldersAndServantsDropdown)
                    {
                        <option value="@p.Value" selected="@Selected(p.Value, spiritualGemsAssignee)">@p.Text</option>
                    }
                </select>
            </td>
        </tr>
        @{
            startTimeMinutes += 10;
            index++;
        }

        <!-- Bible Reading -->
        <tr>
            @{
                var bibleReadingFull = hasExistingData
                ? existingParts.FirstOrDefault(p => p.Part.StartsWith("3. Bible Reading"))?.Part ?? "3. Bible Reading (4 min.)"
                : "3. Bible Reading (4 min.)";

                var bibleReadingId = hasExistingData
                ? existingParts.FirstOrDefault(p => p.Part == bibleReadingFull)?.ID ?? 0
                : 0;

                var bibleReadingAssignee = GetValue(bibleReadingFull, "Assignee");
                var bibleReadingLabel = "3. Bible Reading";
                var bibleReadingTime = "(4 min.)";
            }

            <td>
                @DisplayTime(startTimeMinutes)
                <input type="hidden" name="StartTimes[@index]" value="@SubmitTime(startTimeMinutes)" />
                <input type="hidden" name="PartIDs[@index]" value="@bibleReadingId" />
                <input type="hidden" name="AllAssignees[@index]" value="@bibleReadingAssignee" data-index="@index" />
                <input type="hidden" name="AllAssistants[@index]" value="" />
                <input type="hidden" name="AllParts[@index]" value="@Sanitize(bibleReadingFull)" />
            </td>

            <td>
                @Sanitize(bibleReadingLabel) @bibleReadingTime
            </td>

            <td></td>

            <td>
                <select name="BibleReadingStudent" class="form-control" data-index="@index"
                        onchange="document.querySelector(`input[name='AllAssignees[@index]']`).value = this.value;">
                    <option value="">Brothers</option>
                    @foreach (var b in Model.BrothersDropdown)
                    {
                        <option value="@b.Value" selected="@Selected(b.Value, bibleReadingAssignee)">@b.Text</option>
                    }
                </select>
            </td>
        </tr>
        @{
            startTimeMinutes += 4;
            index++;
        }

        <!-- APPLY YOURSELF BANNER-->
        <tr><td colspan="5" style="background:gold;color:white;">APPLY YOURSELF TO THE FIELD MINISTRY</td></tr>

        <!-- STUDENTS -->
        @{
            int i = 4;
            int studentIndex = 0;
        }

        @if (hasExistingData)
        {
            bool startStudentParts = false;

            var ordered = existingParts
            .OrderBy(p => p.StartTime)
            .Where(p => !string.IsNullOrWhiteSpace(p.Part))
            .ToList();

            foreach (var item in ordered)
            {
                var studentFull = item.Part;

                if (!startStudentParts)
                {
                    if (studentFull.StartsWith("3. Bible Reading", StringComparison.OrdinalIgnoreCase))
                    {
                        startStudentParts = true;
                        continue;
                    }
                    continue;
                }

                if (studentFull.StartsWith("Song", StringComparison.OrdinalIgnoreCase))
                {
                    break;
                }

                var studentTime = ExtractMinutesFromPart(studentFull);
                var studentAssignee = item.Assignee ?? "";
                var studentAssistant = item.Assistant ?? "";
                var studentId = item.ID;
                var studentFullWithTime = $"{studentFull} {studentTime}".Trim();

                <tr>
                    <td>
                        @DisplayTime(startTimeMinutes)
                        <input type="hidden" name="StartTimes[@index]" value="@SubmitTime(startTimeMinutes)" />
                        <input type="hidden" name="PartIDs[@index]" value="@studentId" />
                        <input type="hidden" name="AllAssignees[@index]" value="@studentAssignee" data-index="@index" />
                        <input type="hidden" name="AllAssistants[@index]" value="@studentAssistant" data-index="@index" />
                        <input type="hidden" name="AllParts[@index]" value="@studentFullWithTime" />
                    </td>

                    <td>
                        @Sanitize(studentFull)
                        <input type="hidden" name="StudentPartText[@studentIndex]" value="@Sanitize(studentFull)" />
                    </td>

                    <td></td>

                    <td>
                        <select name="StudentAssignment[@studentIndex]" class="form-control" data-index="@index"
                                onchange="document.querySelector(`input[name='AllAssignees[@index]']`).value = this.value;">
                            <option value="">Students</option>
                            @foreach (var p in Model.PublishersDropdown)
                            {
                                <option value="@p.Value" selected="@Selected(p.Value, studentAssignee)">@p.Text</option>
                            }
                        </select>
                    </td>

                    <td>
                        <select name="StudentAssistant[@studentIndex]" class="form-control" data-index="@index"
                                onchange="document.querySelector(`input[name='AllAssistants[@index]']`).value = this.value;">
                            <option value="">Assistants</option>
                            @foreach (var p in Model.PublishersDropdown)
                            {
                                <option value="@p.Value" selected="@Selected(p.Value, studentAssistant)">@p.Text</option>
                            }
                        </select>
                    </td>
                </tr>

                startTimeMinutes += ExtractMinutes(studentTime);
                index++;
                studentIndex++;
            }
        }
        else
        {
            while (true)
            {
                var studentLabel = Get($"Student Assignment {i - 3} Part");
                var studentTime = Get($"Student Assignment {i - 3} Time");

                if (string.IsNullOrWhiteSpace(studentLabel)) break;
                if ((studentLabel.Contains("Song ") || studentLabel.Contains("Song ")) && string.IsNullOrWhiteSpace(studentTime)) break;

                var studentAssignee = GetValue(studentLabel, "Assignee");
                var studentAssistant = GetValue(studentLabel, "Assistant");
                var studentFullWithTime = $"{studentLabel} {studentTime}".Trim();

                <tr>
                    <td>
                        @DisplayTime(startTimeMinutes)
                        <input type="hidden" name="StartTimes[@index]" value="@SubmitTime(startTimeMinutes)" />
                        <input type="hidden" name="PartIDs[@index]" value="0" />
                        <input type="hidden" name="AllAssignees[@index]" value="@studentAssignee" data-index="@index" />
                        <input type="hidden" name="AllAssistants[@index]" value="@studentAssistant" data-index="@index" />
                        <input type="hidden" name="AllParts[@index]" value="@studentFullWithTime" />
                    </td>

                    <td>
                        @Sanitize(studentLabel) @studentTime
                        <input type="hidden" name="StudentPartText[@studentIndex]" value="@Sanitize(studentLabel)" />
                    </td>

                    <td></td>

                    <td>
                        <select name="StudentAssignment[@studentIndex]" class="form-control" data-index="@index"
                                onchange="document.querySelector(`input[name='AllAssignees[@index]']`).value = this.value;">
                            <option value="">Students</option>
                            @foreach (var p in Model.PublishersDropdown)
                            {
                                <option value="@p.Value" selected="@Selected(p.Value, studentAssignee)">@p.Text</option>
                            }
                        </select>
                    </td>

                    <td>
                        <select name="StudentAssistant[@studentIndex]" class="form-control" data-index="@index"
                                onchange="document.querySelector(`input[name='AllAssistants[@index]']`).value = this.value;">
                            <option value="">Assistants</option>
                            @foreach (var p in Model.PublishersDropdown)
                            {
                                <option value="@p.Value" selected="@Selected(p.Value, studentAssistant)">@p.Text</option>
                            }
                        </select>
                    </td>
                </tr>

                startTimeMinutes += ExtractMinutes(studentTime);
                index++;
                studentIndex++;
                i++;
            }
        }

        <!-- LIVING AS CHRISTIANS BANNER -->
        <tr><td colspan="5" style="background:maroon;color:white;">LIVING AS CHRISTIANS</td></tr>

        <!-- Middle Song Row -->
        <tr>
            @{
                var song = middleSong;
                var songId = hasExistingData
                ? existingParts.FirstOrDefault(p => p.Part == song)?.ID ?? 0
                : 0;
            }
            <td>
                @DisplayTime(startTimeMinutes)
                <input type="hidden" name="StartTimes[@index]" value="@SubmitTime(startTimeMinutes)" />
                <input type="hidden" name="PartIDs[@index]" value="@songId" />
                <input type="hidden" name="AllAssignees[@index]" value="" />
                <input type="hidden" name="AllAssistants[@index]" value="" />
                <input type="hidden" name="AllParts[@index]" value="@Sanitize(song)" />
            </td>

            <td>
                • @Sanitize(song)
                <input type="hidden" name="MiddleSong" value="@Sanitize(song)" />
            </td>
        </tr>
        @{
            startTimeMinutes += 3;
            index++;
        }

        <!-- ELDER ASSIGNMENTS -->
        @{
            int elderIndex = 0;
            bool startElderParts = false;
        }

        @if (hasExistingData)
        {
            var orderedParts = existingParts
            .OrderBy(p => p.StartTime)
            .Where(p => !string.IsNullOrWhiteSpace(p.Part))
            .ToList();

            foreach (var assignment in orderedParts)
            {
                var elderTitle = assignment.Part;

                if (!startElderParts)
                {
                    if (elderTitle.Equals(middleSong, StringComparison.OrdinalIgnoreCase))
                        startElderParts = true;

                    continue;
                }

                if (elderTitle.StartsWith("Concluding Comments", StringComparison.OrdinalIgnoreCase))
                    break;

                var elderId = assignment.ID;
                var elderTimeText = ExtractMinutesFromPart(elderTitle);
                var elderAssignee = assignment.Assignee ?? "";
                var elderAssistant = assignment.Assistant ?? "";
                var fullWithTime = $"{elderTitle} {elderTimeText}".Trim();

                <tr>
                    <td>
                        @DisplayTime(startTimeMinutes)
                        <input type="hidden" name="StartTimes[@index]" value="@SubmitTime(startTimeMinutes)" />
                        <input type="hidden" name="PartIDs[@index]" value="@elderId" />
                        <input type="hidden" name="AllAssignees[@index]" value="@elderAssignee" data-index="@index" />
                        <input type="hidden" name="AllAssistants[@index]" value="@elderAssistant" data-index="@index" />
                        <input type="hidden" name="AllParts[@index]" value="@fullWithTime" />
                    </td>

                    <td>
                        @Sanitize(elderTitle)
                        <input type="hidden" name="ElderAssignmentText[@elderIndex]" value="@Sanitize(elderTitle)" />
                    </td>

                    <td></td>

                    <td>
                        <select name="ElderAssignment[@elderIndex]" class="form-control" data-index="@index"
                                onchange="document.querySelector(`input[name='AllAssignees[@index]']`).value = this.value;">
                            <option value="">Elders/Servants</option>
                            @foreach (var p in Model.EldersAndServantsDropdown)
                            {
                                <option value="@p.Value" selected="@Selected(p.Value, elderAssignee)">@p.Text</option>
                            }
                        </select>
                    </td>

                    <td>
                        @if (elderTitle.Contains("Congregation Bible Study"))
                        {
                            <select name="CbsReader" class="form-control" data-index="@index"
                                    onchange="document.querySelector(`input[name='AllAssistants[@index]']`).value = this.value;">
                                <option value="">Readers</option>
                                @foreach (var p in Model.EldersAndServantsDropdown)
                                {
                                    <option value="@p.Value" selected="@Selected(p.Value, elderAssistant)">@p.Text</option>
                                }
                            </select>
                        }
                    </td>
                </tr>

                startTimeMinutes += elderTitle.Contains("Congregation Bible Study") ? 30 : ExtractMinutes(elderTimeText);
                index++;
                elderIndex++;
            }
        }
        else
        {
            while (true)
            {
                var elderTitle = Get($"Elder Assignment {elderIndex + 1} Part");
                var elderTime = Get($"Elder Assignment {elderIndex + 1} Time");
                if (string.IsNullOrWhiteSpace(elderTitle)) break;

                var elderAssignee = GetValue(elderTitle, "Assignee");
                var elderAssistant = GetValue(elderTitle, "Assistant");
                var fullWithTime = $"{elderTitle} {elderTime}".Trim();

                <tr>
                    <td>
                        @DisplayTime(startTimeMinutes)
                        <input type="hidden" name="StartTimes[@index]" value="@SubmitTime(startTimeMinutes)" />
                        <input type="hidden" name="PartIDs[@index]" value="0" />
                        <input type="hidden" name="AllAssignees[@index]" value="@elderAssignee" data-index="@index" />
                        <input type="hidden" name="AllAssistants[@index]" value="@elderAssistant" data-index="@index" />
                        <input type="hidden" name="AllParts[@index]" value="@fullWithTime" />
                    </td>

                    <td>
                        @Sanitize(elderTitle) @elderTime
                        <input type="hidden" name="ElderAssignmentText[@elderIndex]" value="@Sanitize(elderTitle)" />
                    </td>

                    <td></td>

                    <td>
                        <select name="ElderAssignment[@elderIndex]" class="form-control" data-index="@index"
                                onchange="document.querySelector(`input[name='AllAssignees[@index]']`).value = this.value;">
                            <option value="">Elders/Servants</option>
                            @foreach (var p in Model.EldersAndServantsDropdown)
                            {
                                <option value="@p.Value" selected="@Selected(p.Value, elderAssignee)">@p.Text</option>
                            }
                        </select>
                    </td>

                    <td>
                        @if (elderTitle.Contains("Congregation Bible Study"))
                        {
                            <select name="CbsReader" class="form-control" data-index="@index"
                                    onchange="document.querySelector(`input[name='AllAssistants[@index]']`).value = this.value;">
                                <option value="">Readers</option>
                                @foreach (var p in Model.EldersAndServantsDropdown)
                                {
                                    <option value="@p.Value" selected="@Selected(p.Value, elderAssistant)">@p.Text</option>
                                }
                            </select>
                        }
                    </td>
                </tr>

                startTimeMinutes += elderTitle.Contains("Congregation Bible Study") ? 30 : ExtractMinutes(elderTime);
                index++;
                elderIndex++;
            }
        }

        <!-- Concluding Comments -->
        <tr>
            @{
                var closingPart = "Concluding Comments (3 min.)";
                var closingPartId2 = hasExistingData
                ? existingParts.FirstOrDefault(p => p.Part.StartsWith("Concluding Comments"))?.ID ?? 0
                : 0;
            }

            <td>
                @DisplayTime(startTimeMinutes)
                <input type="hidden" name="StartTimes[@index]" value="@SubmitTime(startTimeMinutes)" />
                <input type="hidden" name="PartIDs[@index]" value="@closingPartId2" />
                <input type="hidden" name="AllAssignees[@index]" value="" />
                <input type="hidden" name="AllAssistants[@index]" value="" />
                <input type="hidden" name="AllParts[@index]" value="@Sanitize(closingPart)" />
            </td>

            <td>
                • @Sanitize("Concluding Comments") (3 min.)
            </td>

            <td></td>
            <td></td>
        </tr>
        @{
            startTimeMinutes += 3;
            index++;
        }

        <!-- Closing Song + Prayer -->
        <tr>
            @* Final Part: Closing Song & Closing Prayer *@
            @{
                var closingTitle = closingSong;
                var closingId = hasExistingData ? existingParts.FirstOrDefault(p => p.Part == closingTitle)?.ID ?? 0 : 0;
                var closingAssignee = hasExistingData
                ? existingParts.FirstOrDefault(p => p.Part == closingTitle)?.Assignee ?? ""
                : closingPrayerAssignee;
            }

            <td>
                @DisplayTime(startTimeMinutes)
                <input type="hidden" name="StartTimes[@index]" value="@SubmitTime(startTimeMinutes)" />
                <input type="hidden" name="PartIDs[@index]" value="@closingId" />
                <input type="hidden" name="AllAssignees[@index]" value="@closingAssignee" data-index="@index" />
                <input type="hidden" name="AllAssistants[@index]" value="" />
                <input type="hidden" name="AllParts[@index]" value="@Sanitize(closingTitle)" />
            </td>

            <td>
                • @Sanitize(closingTitle)
                <input type="hidden" name="ClosingSong" value="@Sanitize(closingTitle)" />
            </td>

            <td style="text-align:right;"><i><small>Closing Prayer:</small></i></td>

            <td>
                <select name="ClosingPrayer" class="form-control" data-index="@index"
                        onchange="document.querySelector(`input[name='AllAssignees[@index]']`).value = this.value;">
                    <option value="">Elders/Servants</option>
                    @foreach (var p in Model.EldersAndServantsDropdown)
                    {
                        <option value="@p.Value" selected="@Selected(p.Value, closingAssignee)">@p.Text</option>
                    }
                </select>
            </td>
        </tr>
        @{
            startTimeMinutes += 3;
            index++;
        }

    </table>
    <center><button type="submit" style="margin:20px;">Save All Assignments</button></center>
</form>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.querySelector('form');

        if (form) {
            form.addEventListener('submit', function () {
                document.querySelectorAll('select').forEach(select => {
                    const index = select.dataset.index;
                    if (!index) {
                        console.warn(`⛔ Missing data-index on: ${select.name}`);
                        return;
                    }

                    // 🔁 Log the select and value
                    console.log(`🔄 Syncing: ${select.name} [${index}] = ${select.value}`);

                    // Update Assignee
                    if (
                        select.name.startsWith('Chairman') ||
                        select.name.startsWith('OpeningPrayer') ||
                        select.name.startsWith('TreasuresTalkSpeaker') ||
                        select.name.startsWith('SpiritualGemsSpeaker') ||
                        select.name.startsWith('BibleReadingStudent') ||
                        select.name.startsWith('StudentAssignment') ||
                        select.name.startsWith('ElderAssignment') ||
                        select.name.startsWith('ClosingPrayer')
                    ) {
                        const hiddenAssignee = document.querySelector(`input[name="AllAssignees[${index}]"]`);
                        if (hiddenAssignee) {
                            hiddenAssignee.value = select.value;
                            console.log(`✅ Updated AllAssignees[${index}] = ${select.value}`);
                        } else {
                            console.warn(`❌ AllAssignees[${index}] not found`);
                        }
                    }

                    // Update Assistant
                    if (
                        select.name.startsWith('StudentAssistant') ||
                        select.name.startsWith('CbsReader')
                    ) {
                        const hiddenAssistant = document.querySelector(`input[name="AllAssistants[${index}]"]`);
                        if (hiddenAssistant) {
                            hiddenAssistant.value = select.value;
                            console.log(`✅ Updated AllAssistants[${index}] = ${select.value}`);
                        } else {
                            console.warn(`❌ AllAssistants[${index}] not found`);
                        }
                    }
                });
            });
        }
    });
</script>

