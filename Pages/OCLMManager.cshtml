@page
@model Khronos4.Pages.OCLMManagerModel
@{
    ViewData["Title"] = "OCLM Meeting Schedule - Khronos Pro ";
}

<div class="page_heading">
    <h4>@Model.CongregationName Congregation</h4>
    <h5>Our Christian Life and Ministry Manager</h5>
    <p>
        <a href="/OCLMManager">OCLM Manager Home</a> |
        <a href="/PublisherManager">Manage Publishers</a> |
        <a href="https://www.jw.org/en/library/jw-meeting-workbook/" target="_blank">JW Workbook</a> |
        <a href="/Statistics">Statistics</a>
    </p>
    @* <img class="tile-icon-large" src="./images/OclmElder.jpg" /> *@
</div>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@Html.Raw(TempData["Error"])</div>
}
@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@Html.Raw(TempData["Success"])</div>
}

<div class="container">
    <!-- Year Dropdown -->
    <label for="yearDropdown" class="mt-3">Select a Year:</label>
    <select id="yearDropdown" class="form-control" onchange="updateYearSelection()">
        @foreach (var year in Model.AvailableYears)
        {
            <option value="@year" selected="@(year == Model.SelectedYear ? "selected" : null)">@year</option>
        }
    </select>

    <!-- Dropdown for Weekly Meetings -->
    <label for="meetingDropdown" class="mt-3">Select a Week:</label>
    <select id="meetingDropdown" class="form-control">
        <option value="">Select a Week</option>
        @foreach (var meeting in Model.WeeklyMeetingLinks)
        {
            var displayText = Model.GetDisplayText(meeting);
            <option value="@meeting">@displayText</option> 
        }
    </select>
    <br />
    <button id="scrapeButton" class="btn btn-primary">Load Workbook</button>

    <div id="loading" style="display: none; text-align: center; margin-top: 20px;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Fetching workbook ...</p>
    </div>

    <div id="meetingData" style="margin-top: 20px;"></div>
</div>

<script> /* updateYearSelection() */
    function updateYearSelection() {
        let selectedYear = document.getElementById("yearDropdown").value;
        window.location.href = `?year=${selectedYear}`;
    }

    document.addEventListener("click", async function (event) {
        if (event.target && event.target.id === "updateButton") {
            await updateOCLMParts();
        }
    });
</script>

<script> /* fetchMidweekTime() */
    async function fetchMidweekTime() {
        try {
            const response = await fetch(`/OCLMManager?handler=CongregationMidweekTime`);
            const data = await response.json();

            if (data.success) {
                return data.midweekTime; // Return the time as a string (e.g., "19:00")
            } else {
                console.error("Error fetching Midweek Time:", data.message);
                return null; // Return null if error
            }
        } catch (error) {
            console.error("Error:", error);
            return null;
        }
    }
</script>

<script> /* AJAX */
    document.getElementById("scrapeButton").addEventListener("click", async function () {
        const meetingUrl = document.getElementById("meetingDropdown").value;
        const meetingDataDiv = document.getElementById("meetingData");
        const loadingDiv = document.getElementById("loading");

        if (!meetingUrl) {
            meetingDataDiv.innerHTML = "<p class='text-danger'>Please select a week before scraping.</p>";
            return;
        }

        const displayText = document.querySelector(`#meetingDropdown option[value="${meetingUrl}"]`).textContent;

        // Step 1: Check if the meeting data already exists in the DB
        try {
            const checkResponse = await fetch(`/OCLMManager?handler=CheckMeetingExists&weekOf=${encodeURIComponent(displayText)}`);
            const checkData = await checkResponse.json();

            if (checkData.exists) {
                // Still fetch the data from the server (which returns the partial from the DB)
                try {
                    const response = await fetch(`/OCLMManager?handler=ScrapeMeetingDetails&meetingUrl=${encodeURIComponent(meetingUrl)}`);
                    const html = await response.text();
                    meetingDataDiv.innerHTML = html;
                    return;
                } catch (error) {
                    meetingDataDiv.innerHTML = `<p class='text-danger'>❌ Failed to load existing schedule.</p>`;
                    return;
                }
            }
        } catch (error) {
            console.error("Error checking meeting existence:", error);
            meetingDataDiv.innerHTML = `<p class='text-danger'>❌ Failed to check existing schedule.</p>`;
            return;
        }

        // Step 2: Proceed to scrape only if no existing entry
        loadingDiv.style.display = "block";
        meetingDataDiv.style.display = "none";

        try {
            const encodedUrl = encodeURIComponent(meetingUrl);
            const response = await fetch(`/OCLMManager?handler=ScrapeMeetingDetails&meetingUrl=${encodedUrl}`);
            const html = await response.text();
            meetingDataDiv.innerHTML = html;
        } catch (error) {
            meetingDataDiv.innerHTML = `<p class='text-danger'>❌ An error occurred: ${error}</p>`;
        } finally {
            loadingDiv.style.display = "none";
            meetingDataDiv.style.display = "block";
        }
    });
</script>




